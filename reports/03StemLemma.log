Traceback (most recent call last):
  File "/Users/johannes/opt/anaconda3/envs/books/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/johannes/opt/anaconda3/envs/books/lib/python3.8/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/johannes/opt/anaconda3/envs/books/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/johannes/opt/anaconda3/envs/books/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/Users/johannes/opt/anaconda3/envs/books/lib/python3.8/asyncio/base_events.py", line 608, in run_until_complete
    return future.result()
  File "/Users/johannes/opt/anaconda3/envs/books/lib/python3.8/site-packages/nbclient/client.py", line 540, in async_execute
    await self.async_execute_cell(
  File "/Users/johannes/opt/anaconda3/envs/books/lib/python3.8/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/johannes/opt/anaconda3/envs/books/lib/python3.8/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
print("Blob1 text language is ",myBlob1.detect_language())
print("Blob2 text language is ",myBlob2.detect_language())
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mHTTPError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-5-db12ac4aebcf>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mprint[0m[0;34m([0m[0;34m"Blob1 text language is "[0m[0;34m,[0m[0mmyBlob1[0m[0;34m.[0m[0mdetect_language[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mprint[0m[0;34m([0m[0;34m"Blob2 text language is "[0m[0;34m,[0m[0mmyBlob2[0m[0;34m.[0m[0mdetect_language[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/site-packages/textblob/blob.py[0m in [0;36mdetect_language[0;34m(self)[0m
[1;32m    566[0m         [0;34m:[0m[0mrtype[0m[0;34m:[0m [0mstr[0m[0;34m[0m[0;34m[0m[0m
[1;32m    567[0m         """
[0;32m--> 568[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0mtranslator[0m[0;34m.[0m[0mdetect[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mraw[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    569[0m [0;34m[0m[0m
[1;32m    570[0m     [0;32mdef[0m [0mcorrect[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/site-packages/textblob/translate.py[0m in [0;36mdetect[0;34m(self, source, host, type_)[0m
[1;32m     70[0m         [0mdata[0m [0;34m=[0m [0;34m{[0m[0;34m"q"[0m[0;34m:[0m [0msource[0m[0;34m}[0m[0;34m[0m[0;34m[0m[0m
[1;32m     71[0m         [0murl[0m [0;34m=[0m [0;34mu'{url}&sl=auto&tk={tk}'[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0murl[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0murl[0m[0;34m,[0m [0mtk[0m[0;34m=[0m[0m_calculate_tk[0m[0;34m([0m[0msource[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 72[0;31m         [0mresponse[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_request[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mhost[0m[0;34m=[0m[0mhost[0m[0;34m,[0m [0mtype_[0m[0;34m=[0m[0mtype_[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     73[0m         [0mresult[0m[0;34m,[0m [0mlanguage[0m [0;34m=[0m [0mjson[0m[0;34m.[0m[0mloads[0m[0;34m([0m[0mresponse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     74[0m         [0;32mreturn[0m [0mlanguage[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/site-packages/textblob/translate.py[0m in [0;36m_request[0;34m(self, url, host, type_, data)[0m
[1;32m     90[0m         [0;32mif[0m [0mhost[0m [0;32mor[0m [0mtype_[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     91[0m             [0mreq[0m[0;34m.[0m[0mset_proxy[0m[0;34m([0m[0mhost[0m[0;34m=[0m[0mhost[0m[0;34m,[0m [0mtype[0m[0;34m=[0m[0mtype_[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 92[0;31m         [0mresp[0m [0;34m=[0m [0mrequest[0m[0;34m.[0m[0murlopen[0m[0;34m([0m[0mreq[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     93[0m         [0mcontent[0m [0;34m=[0m [0mresp[0m[0;34m.[0m[0mread[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     94[0m         [0;32mreturn[0m [0mcontent[0m[0;34m.[0m[0mdecode[0m[0;34m([0m[0;34m'utf-8'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/urllib/request.py[0m in [0;36murlopen[0;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[1;32m    220[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    221[0m         [0mopener[0m [0;34m=[0m [0m_opener[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 222[0;31m     [0;32mreturn[0m [0mopener[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdata[0m[0;34m,[0m [0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    223[0m [0;34m[0m[0m
[1;32m    224[0m [0;32mdef[0m [0minstall_opener[0m[0;34m([0m[0mopener[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/urllib/request.py[0m in [0;36mopen[0;34m(self, fullurl, data, timeout)[0m
[1;32m    529[0m         [0;32mfor[0m [0mprocessor[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mprocess_response[0m[0;34m.[0m[0mget[0m[0;34m([0m[0mprotocol[0m[0;34m,[0m [0;34m[[0m[0;34m][0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    530[0m             [0mmeth[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mprocessor[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 531[0;31m             [0mresponse[0m [0;34m=[0m [0mmeth[0m[0;34m([0m[0mreq[0m[0;34m,[0m [0mresponse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    532[0m [0;34m[0m[0m
[1;32m    533[0m         [0;32mreturn[0m [0mresponse[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/urllib/request.py[0m in [0;36mhttp_response[0;34m(self, request, response)[0m
[1;32m    638[0m         [0;31m# request was successfully received, understood, and accepted.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    639[0m         [0;32mif[0m [0;32mnot[0m [0;34m([0m[0;36m200[0m [0;34m<=[0m [0mcode[0m [0;34m<[0m [0;36m300[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 640[0;31m             response = self.parent.error(
[0m[1;32m    641[0m                 'http', request, response, code, msg, hdrs)
[1;32m    642[0m [0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/urllib/request.py[0m in [0;36merror[0;34m(self, proto, *args)[0m
[1;32m    567[0m         [0;32mif[0m [0mhttp_err[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    568[0m             [0margs[0m [0;34m=[0m [0;34m([0m[0mdict[0m[0;34m,[0m [0;34m'default'[0m[0;34m,[0m [0;34m'http_error_default'[0m[0;34m)[0m [0;34m+[0m [0morig_args[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 569[0;31m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_call_chain[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    570[0m [0;34m[0m[0m
[1;32m    571[0m [0;31m# XXX probably also want an abstract factory that knows when it makes[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/urllib/request.py[0m in [0;36m_call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    500[0m         [0;32mfor[0m [0mhandler[0m [0;32min[0m [0mhandlers[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    501[0m             [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mhandler[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 502[0;31m             [0mresult[0m [0;34m=[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    503[0m             [0;32mif[0m [0mresult[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    504[0m                 [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/envs/books/lib/python3.8/urllib/request.py[0m in [0;36mhttp_error_default[0;34m(self, req, fp, code, msg, hdrs)[0m
[1;32m    647[0m [0;32mclass[0m [0mHTTPDefaultErrorHandler[0m[0;34m([0m[0mBaseHandler[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    648[0m     [0;32mdef[0m [0mhttp_error_default[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mreq[0m[0;34m,[0m [0mfp[0m[0;34m,[0m [0mcode[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0mhdrs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 649[0;31m         [0;32mraise[0m [0mHTTPError[0m[0;34m([0m[0mreq[0m[0;34m.[0m[0mfull_url[0m[0;34m,[0m [0mcode[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0mhdrs[0m[0;34m,[0m [0mfp[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    650[0m [0;34m[0m[0m
[1;32m    651[0m [0;32mclass[0m [0mHTTPRedirectHandler[0m[0;34m([0m[0mBaseHandler[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mHTTPError[0m: HTTP Error 404: Not Found
HTTPError: HTTP Error 404: Not Found

